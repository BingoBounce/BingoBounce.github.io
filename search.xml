<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Figure out How &quot;spines&quot; in matplotlib works</title>
      <link href="/2019/07/26/matplotlib/"/>
      <url>/2019/07/26/matplotlib/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这里我们默认导入了需要的模块。</p><blockquote><p>⚠️ 为节省篇幅，本文章假设了我们已经导入所需库。另外spines在字典里的意思为脊椎，个人觉得翻译为坐标轴比较贴切。</p></blockquote><h2 id="设计图像的坐标轴spines"><a class="markdownIt-Anchor" href="#设计图像的坐标轴spines"></a> 设计图像的坐标轴(spines)</h2><h3 id="隐藏指定的spines"><a class="markdownIt-Anchor" href="#隐藏指定的spines"></a> 隐藏指定的spines</h3><p>在matplotlib的图中，默认有四个轴，两个横轴和两个竖轴，即top、bottom、left和right.</p><p><img src="https://github.com/BingoBounce/Personal_Img_Bed/blob/master/1564115742812.png?raw=true" alt="1564115742812"></p><p>如果需要隐藏某方向的轴，只需要使用如下命令：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先我们需要获得图中的四个轴axes</span></span><br><span class="line">ax = plt.gca() <span class="comment"># gca是"get current axes"的缩写</span></span><br><span class="line"><span class="comment"># 这里指定隐藏top轴</span></span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/BingoBounce/Personal_Img_Bed/blob/master/1564116232546.png?raw=true" alt="1564116232546"></p><p>上述隐藏spines的代码原理是将spines的颜色设置为<code>none</code>，相当&quot;隐形&quot;了。</p><p>⚙️  另外还有一种更加直观的方法，直接将spines设置为不可见：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.spines[<span class="string">'top'</span>].set_visible(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="设置spines位置"><a class="markdownIt-Anchor" href="#设置spines位置"></a> 设置spines位置</h3><p>除了可以隐藏spines,也可以设计spines所处的位置。其代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置left轴向外偏离图像30点</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'outward'</span>, <span class="number">30</span>))</span><br></pre></td></tr></table></figure><p><img src="https://github.com/BingoBounce/Personal_Img_Bed/blob/master/1564116726141.png?raw=true" alt="1564116726141"></p><p>为了指定所需x,y轴所对应的spines,我们可以进行如下设定：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置x轴对应bottom轴，y轴对应left轴</span></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br></pre></td></tr></table></figure><hr><p>如果我们现在想显示x,y轴是十字交叉的坐标轴，而不是像上图一样只是两个不相交的线段，那我们可以设置移动轴的位置到交叉轴指定坐标，例如这里我们指定在0处交叉：</p><blockquote><p>为使得一会儿更方便看出不同，我们先把x轴和其刻度的颜色改为黄色:</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.tick_params(axis=<span class="string">'x'</span>, colors=<span class="string">'yellow'</span>) <span class="comment"># tick_params用来设置轴的参数</span></span><br></pre></td></tr></table></figure><p>接下来，我们需要使用上述的<code>set_position()</code>方法来移动交叉轴位置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们先把right轴给隐藏</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>效果如图：</p><p><img src="https://github.com/BingoBounce/Personal_Img_Bed/blob/master/1564119418042.png?raw=true" alt="1564119418042"></p><hr><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2><ol><li><p><a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">看文档不会错系列-matplotlib</a></p></li><li><p><a href="http://scipy-lectures.org/intro/matplotlib/index.html" target="_blank" rel="noopener">良心教程👍scipy-lecture</a></p></li></ol><hr><h2 id="easter-egg"><a class="markdownIt-Anchor" href="#easter-egg"></a> Easter Egg</h2><blockquote><p>读不在三更五鼓，功只怕一曝十寒。——郭沫若</p></blockquote><p>我们可能在画图时会遇到坐标轴的刻度被线条遮挡，导致图的效果不是很好的情形。对于这个问题，我们可以通过改变字体大小和背景透明度的方式，使得线条和刻度同时可见。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> ax.get_xticklabels() + ax.get_yticklabels():</span><br><span class="line">    label.set_fontsize(<span class="number">14</span>)</span><br><span class="line">    label.set_bbox(dict(facecolor=<span class="string">'white'</span>, edgecolor=<span class="string">'None'</span>, alpha=<span class="number">0.75</span>))</span><br></pre></td></tr></table></figure><p>方法说明：</p><ul><li><code>set_fontsize()</code>:重新设置字体的大小</li><li><code>set_bbox()</code>:设置透明度相关的参数：<ul><li><code>facecolor</code>：调节 <code>bbox</code>的前景色</li><li><code>edgecolor</code>:设置边框的颜色，当为<code>None</code>时，表示无边框</li><li><code>alpha</code>设置透明度，范围<code>[0,1]</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Star import is a bad idea!</title>
      <link href="/2019/07/25/import/"/>
      <url>/2019/07/25/import/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="star-import-is-a-bad-idea"><a class="markdownIt-Anchor" href="#star-import-is-a-bad-idea"></a> Star import is a bad idea!</h2><p>Star import即<code>from &lt;module&gt; import *</code>,意味着我们可以访问<module>中所有我们想要访问的命名。</module></p><p>我们先定义如下脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># something.py</span></span><br><span class="line"></span><br><span class="line">public_variable = <span class="number">42</span></span><br><span class="line">_private_variable = <span class="number">141</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">public_function</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I'm a public function! yay!"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_function</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Ain't nobody accessing me from another module...usually"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublicClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_WeirdClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>然后我们在python解释器中执行<code>from something import *</code>，得到如下结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> something <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>public_variable</span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_private_variable</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_private_variable'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>public_function()</span><br><span class="line"><span class="string">"I'm a public function! yay!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_private_function()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_private_function'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = PublicClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;something.PublicClass object at ...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = _WeirdClass()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_WeirdClass'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>可以发现调用<code>_private_variable</code>时，发生名称错误。</p><p>这是因为<code>_private_variable</code>是以<code>_</code>开头的私有变量。如果想允许脚本能够访问模块中的私有变量，则需要在模块中使用<code>__all__</code>。</p><blockquote><p><code>_all__</code>是一个字符串列表，它定义了模块(或包)中的哪些名称将在模块上使用<code>from &lt;module&gt; import *</code>时导出。</p></blockquote><p>当模块中没有使用<code>__all__</code>时，则在调用模块的脚本中可以调用除带有<code>_</code>开头的私有变量外的所有名称。</p><p>于是我们再在<code>something.py</code>文件的顶部添加如下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__all__ = [<span class="string">'_private_variable'</span>, <span class="string">'PublicClass'</span>]</span><br></pre></td></tr></table></figure><p>现在，我们只能从<code>from something import *</code>中调用<code>_private_variable</code>和<code>PublicClass</code>两个名称。如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> something <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>public_variable</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'public_variable'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_private_variable</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>public_function()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'public_function'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_private_function()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_private_function'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = PublicClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;something.PublicClass object at ...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = _WeirdClass()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_WeirdClass'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>以上是使用<code>from &lt;module&gt; import *</code>的情形。对于<code>from &lt;package&gt; import *</code>，<code>__all__</code>会处理在包内的模块，而除此之外，两者作用大致一样。因此，在我们使用<code>from &lt;package&gt; import *</code>时，<code>_all__</code>需要指定所有要加载并导入到当前命名空间的模块。</p><blockquote><p>⚠️ 在一个包中的<code>__init__.py</code>文件中我们忽略声明<code>__all__</code>时，则<code>from &lt;package&gt; import *</code>将不会导入任何东西。</p></blockquote><hr><p>python语言的简洁性是其一大特性。而python设计理念之一为：<em>Explicit is better than implicit</em>，即显式比隐式好。</p><p><code>from &lt;module&gt; import *</code>不是显式的。它没有告诉我们要导入什么，或者要将什么名称引入命名空间。而显式地指定我们需要导入的内容会更好。这样，读者(很可能是你未来的自己)就不会混淆变量/函数/类/等等的位置。</p><p>这就引出另一大特性：<em>Readability counts.</em>-代码可读性很重要。</p><p>即使我们需要导入很多名称，只要显式地指定需要导入的内容，代码也会比star import的可读性高很多。例如使用PEP 328:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Tkinter <span class="keyword">import</span> (Tk, Frame, Button, Entry, Canvas, Text, </span><br><span class="line">        LEFT, DISABLED, NORMAL, RIDGE, END)</span><br></pre></td></tr></table></figure><hr><p>此外，start import还有其他风险。</p><p>例如当模块/或包的作者决定更改<code>__all__</code>列表的内容(添加/删除列表中的内容)时:</p><ul><li>作者从<code>__all__</code>中删除了一个字符串。如果我们的代码使用了这个名称，那么代码将会引发一个NameError，并且很难找出原因。(<strong>隐藏bug的具体可能性</strong>)</li><li>作者<code>__all__</code>中添加了许多新名称字符串，然而我们可能不需要使用新名称，相当于<strong>我们在用不关心的东西填充名称空间，造成名称空间的污染</strong>。这些新名称甚至可能在我们没有意识到的情况下与其他函数或类的定义起冲突。</li></ul><p>当然，star import并不总是不好的，有时候也可以偷偷懒(●’◡’●)，这取决于我们是编写脚本还是编写需要重用的代码。</p><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2><ol><li><a href="https://medium.com/@s16h/importing-star-in-python-88fe9e8bd4d2" target="_blank" rel="noopener">Shahriar Tajbakhsh的博客：importing-star-in-python</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Warning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/20/hello-world/"/>
      <url>/2019/07/20/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
