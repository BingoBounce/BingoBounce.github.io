<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pandas_cookbook</title>
      <link href="/2019/08/02/pandas-cookbook/"/>
      <url>/2019/08/02/pandas-cookbook/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本文是github项目pandas-cookbook的中文翻译项目的学习笔记，原项目链接在文章Reference中注明。</p></blockquote><a id="more"></a><h2 id="读取csv文件"><a class="markdownIt-Anchor" href="#读取csv文件"></a> 读取csv文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'xx.csv'</span>,, sep=<span class="string">';'</span>, encoding=<span class="string">'latin1'</span>, parse_dates=[<span class="string">'Date'</span>], dayfirst=<span class="literal">True</span>, index_col=<span class="string">'Date'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>sep=';'</code>将字段分隔符改为<code>;</code>。字符类型，指定分隔符。默认使用&quot;,&quot;分割（csv文件一般以逗号分割)</li><li><code>names</code>: array-like 可以设置添加表头，如数据有表头，但想用新的表头，可以设置<code>header=0,names=['a','b']</code>实现表头定制。</li><li><code>header</code><ul><li><code>header=None</code>表示原始文件没有列索引，这样该命令会自动加上列索引</li><li><code>header=0</code>:表示文件<strong>第1行</strong>为列索引，可以添加<strong>names</strong>来替换原来的列索引(可以使用range函数)</li></ul></li><li><code>encoding='latin1'</code>修改编码格式为<code>'latin1'</code> (默认是 <code>'utf8'</code>)</li><li><code>parse_dates=['Date']</code>处理 'Date’字段的日期格式</li><li><code>dayfirst=True</code>告诉pandas日期的格式是“天”在前而不是“月”在前</li><li><code>index_col='Date'</code>将Date列设为索引（Index）。<ul><li><code>index_col</code>：指定数据中<strong>哪一列</strong>作为Dataframe的行索引,也可以指定多列形成层次索引，默认为None.系统会自动加上行索引。</li></ul></li></ul><p>其他参数：</p><ul><li><code>delimiter</code>:字符类型，定界符，若指定该参数，则sep失效</li><li><code>skiprows=n</code>: 忽略前n行数据</li><li><code>parse_dates</code>:<ul><li>布尔类型： 解析索引</li><li>列表/整数/表头(names): 如[1,2,3]-&gt;解析<strong>1，2，3列</strong>的值作为独立日期列</li><li>嵌套列表：如[[1,3]]-&gt;==<strong>合并</strong>==1，3列作为ig日期列使用<br>字典：如<code>{'foo':[1,3]}</code>-&gt;将1，3列合并，合并列起名为<code>'foo'</code></li><li>日期显示格式：<br><code>dayfirst</code> : boolean, default False :Day/Month格式的日期类型</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># parse_dates实例</span></span><br><span class="line"><span class="comment"># 将time1和time2两列解析为日期格式</span></span><br><span class="line">df=pd.read_csv(file_path,parse_dates=[<span class="string">'time1'</span>,<span class="string">'time2'</span>])</span><br></pre></td></tr></table></figure><ul><li><code>na_values= NaN</code>: 标量/str等，设置一组用于替换NA/NaN的值</li><li><code>na_filter=False</code>:boolean, default True，是否检查丢失值（空字符串或者是空值）对于大文件来说数据集中没有空值，设定na_filter=False可以提升读取速度</li><li><code>thousands=','</code>: str, default None 千分位分割符，如“，”或者“.&quot;</li><li><code>usecols</code>:可以指定原数据集中，<strong>所使用的列</strong>。当<code>usecols=[0,1,2,3]</code>时，即选中前4列，之后令第一列为行索引.</li><li><code>nrows</code>：可以给出从原始数据集中的所读取的<strong>行数</strong>，目前只能从第一行开始到nrows行</li></ul><p>如果想要修改dataframe的一些列名：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.columns = [ ... ]</span><br></pre></td></tr></table></figure><hr><h2 id="切片索引"><a class="markdownIt-Anchor" href="#切片索引"></a> 切片索引</h2><p>将数据绘制成图像：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_ = df.plot(figsize=(<span class="number">15</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>获取前6行数据:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[:<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>选取第一列：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[:<span class="number">6</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>选取多列数据：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取索引名为index1和index2的两列数据</span></span><br><span class="line">df[[<span class="string">'index1'</span>, <span class="string">'index2'</span>]]</span><br></pre></td></tr></table></figure><p>只选取前10行：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[[<span class="string">'index1'</span>, <span class="string">'index2'</span>]][:<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>使用条件索引获取相应数据：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取df中索引名为index的列中，所有值为1的数据</span></span><br><span class="line">df[df[<span class="string">'index'</span>] == <span class="number">1</span>] <span class="comment"># df[index] = 1得到一个布尔值列表</span></span><br></pre></td></tr></table></figure><p>也可以结合布尔操作来获取条件数据：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value_larger_one = (df[<span class="string">'index'</span>] &gt; <span class="number">1</span>)</span><br><span class="line">value_less_zero  = (df[<span class="string">'index'</span>] &lt; <span class="number">0</span>)</span><br><span class="line">df[value_larger_one | value_less_zero ] <span class="comment"># "或"条件，"和"条件可以使用&amp;，"非"：!</span></span><br></pre></td></tr></table></figure><p>返回Dataframe的索引：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.index <span class="comment"># 返回一个索引列表，以及索引的相关属性</span></span><br><span class="line"><span class="comment"># 也可以对index重新赋值</span></span><br><span class="line">df.index = [...]</span><br></pre></td></tr></table></figure><p>pandas有一系列获取time series的函数，可以获得每一行数据对应的每个月第几天，星期几：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.index.day</span><br><span class="line">df.index.weekday</span><br></pre></td></tr></table></figure><hr><h2 id="统计"><a class="markdownIt-Anchor" href="#统计"></a> 统计</h2><p>统计每项索引数据的总数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">'index'</span>].value_counts()</span><br></pre></td></tr></table></figure><p>只观察最多的5项：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">'index'</span>].value_counts()[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>更直观地绘制柱状图：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">'index'</span>].value_counts().plot(kind=<span class="string">'bar'</span>)</span><br></pre></td></tr></table></figure><p>Dataframe可以使用<code>groupby()</code>方法，对数据进行分类。也可以用作统计数据：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># df.groupby('index_name').aggregate(sum) 的意思就是说，首先将数据按照索引index_name内容分组，然后对每一组的数据求和。</span></span><br><span class="line">df_counts = df.groupby(<span class="string">'index_name'</span>).aggregate(sum)</span><br><span class="line"><span class="comment"># 这里的sum函数还可以换为其他的统计函数，例如max、numpy.median,...</span></span><br></pre></td></tr></table></figure><p>使用<code>dropna</code>函数丢弃数据中一些几乎全为空的列</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dropna中的参数axis=1的意思是去掉整列而不是行</span></span><br><span class="line"><span class="comment"># how=‘any’的意思是任何有空值的列都去掉</span></span><br><span class="line">df = df.dropna(axis=<span class="number">1</span>, how=<span class="string">'any'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>⚠️ <code>dropna</code>函数只是将包含空值的列数据都删去，而不删除列。</p></blockquote><p>如果想要删除整个列，则需要使用<code>drop</code>函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用drop函数，删除指定的列index1, index2</span></span><br><span class="line">df = df.drop([<span class="string">'index1, index2'</span>], axis=<span class="number">1</span>) <span class="comment"># axis=1同样表示删除整列，默认是删除整行</span></span><br></pre></td></tr></table></figure><p>使用<code>resample()</code>方法，将df数据进行重采样，可对时间序列数据重新采样和频率转换</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">参数说明：</span></span><br><span class="line"><span class="string">freq： 表示重采样频率，例如‘M'、‘5min'，Second(15)</span></span><br><span class="line"><span class="string">how：用于产生聚合值的函数名或数组函数</span></span><br><span class="line"><span class="string">closed： 在降采样时，各时间段的哪一段是闭合的，‘right'或‘left'，默认‘right'</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">_ = df[<span class="string">'index'</span>].resample(<span class="string">'M'</span>, how=np.median)</span><br></pre></td></tr></table></figure><hr><h2 id="pandas的series与numpy的array关系"><a class="markdownIt-Anchor" href="#pandas的series与numpy的array关系"></a> pandas的Series与Numpy的array关系</h2><p>DataFrame中的每一列都是<code>pd.Series</code>类型的数据。pandas中Series类型的数据实际上是numpy array类型的数据，如果我们对任何<code>Series</code>类型的数据使用<code>.values</code>方法，则可以得到内部的numpy array。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">返回结果</span></span><br><span class="line"><span class="string">0    1</span></span><br><span class="line"><span class="string">1    2</span></span><br><span class="line"><span class="string">2    3</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).values</span><br><span class="line"><span class="comment"># array([1,2,3])</span></span><br><span class="line"></span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment"># array([1,2,3])</span></span><br></pre></td></tr></table></figure><blockquote><p>💡 数组的二值化操作：对数据进行条件判断，返回一个布尔值列表，满足条件的数据值为True,代表1；不满足的即为False，代表0.</p><p>可以将二值化向量转换为0,1表示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; vec.astype(float)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><blockquote><p>💡 在python2版本中，除法是使用整除，即取整去余，而在python3中，则是返回浮点型。为了使得python2中也返回浮点型，可以导入模块<code>from __future__ import division</code>。</p></blockquote><hr><h2 id="拷贝与融合数据"><a class="markdownIt-Anchor" href="#拷贝与融合数据"></a> 拷贝与融合数据</h2><p>拷贝所需的Dataframe:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_copy = df[[<span class="string">'index'</span>]].copy()</span><br></pre></td></tr></table></figure><p>向Dataframe中添加新的列：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.loc[:, <span class="string">'index_name'</span>] <span class="comment"># 第二个属性是给新添加的列的索引</span></span><br></pre></td></tr></table></figure><p>使用<code>concat</code>函数可以将所有数据融合在一起：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将dataframe#2数据与dataframe#1融合</span></span><br><span class="line">df = pd.concat([df_1, df_2])</span><br></pre></td></tr></table></figure><hr><h2 id="字符串操作"><a class="markdownIt-Anchor" href="#字符串操作"></a> 字符串操作</h2><p>pandas提供了一些向量化的函数，来处理某些列是否包含<strong>指定字符串</strong>的问题：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查dataframe某列中是否包含字符串'string'</span></span><br><span class="line">is_string = df[<span class="string">'index'</span>].str.contains(<span class="string">'string'</span>) <span class="comment"># 返回了一个二值向量</span></span><br></pre></td></tr></table></figure><p>将字符串切片：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = df.str.slice(start, end) <span class="comment"># 参数为切割的索引区间，只取这个区间内的字符串</span></span><br></pre></td></tr></table></figure><p>当想要对数字字符串进行<strong>排序</strong>，可以使用<code>sort()</code>方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设我们选取index1,index2,index3三列，并且按照index1列数字排序</span></span><br><span class="line">df[[<span class="string">'index1'</span>,<span class="string">'index2'</span>,<span class="string">'index3'</span>]].sort(<span class="string">'index1'</span>)</span><br><span class="line"><span class="comment"># sort方法还可以传入参数ascending,指定排序是升序还是降序</span></span><br></pre></td></tr></table></figure><p>若想将所有字符串大写，可用如下操作:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">'index'</span>].str.upper()</span><br></pre></td></tr></table></figure><hr><h2 id="处理脏数据"><a class="markdownIt-Anchor" href="#处理脏数据"></a> 处理&quot;脏&quot;数据</h2><p>为了检查数据，可以先使用<code>.unique()</code>方法将dataframe中所有值列出来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.unique()</span><br></pre></td></tr></table></figure><p>当一些空值没有被pandas处理，而被转换为类似’N/A’ 和’NO CLUE’的字符串类型，则我们需要将其转换为通常的nan类型.还可能有一些数据是浮点型，而被转换为了字符串型。我们需要将所有数据都转换为string类型：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在读取csv文件时，可以传入na_values参数来处理这些缺失值</span></span><br><span class="line"><span class="comment"># 指定csv文件中需要转换为string类型的列index</span></span><br><span class="line">na_values = [<span class="string">'NO CLUE'</span>, <span class="string">'N/A'</span>, <span class="string">'0'</span>] <span class="comment"># 定义缺失值可能形式的列表</span></span><br><span class="line">df = pd.read_csv(<span class="string">'../xx.csv'</span>, na_values=na_values, dtype=&#123;<span class="string">'index'</span>: str&#125;))</span><br></pre></td></tr></table></figure><hr><h2 id="时间戳处理"><a class="markdownIt-Anchor" href="#时间戳处理"></a> 时间戳处理</h2><p>用pandas解析时间戳最神奇的地方在于，numpy的datetimes本身就是以unix的时间戳形式保存的，因此，我们要做的就是，告诉pandas这些int型数据就是时间戳。</p><p>如果我们有一个时间段用秒或者微秒来表示的，那么直接转换<code>datetime64</code>类型，pandas就可以帮我们处理了。</p><p>我们可以使用<code>pd.to_datetime</code>函数来完成int型时间戳到datetime类型的转换:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先将时间戳对应的列数据由字符串转换为int类型</span></span><br><span class="line">df[<span class="string">'time_stamp'</span>] = df[<span class="string">'time_stamp'</span>].astype(int) <span class="comment"># 强制转换</span></span><br><span class="line">df[<span class="string">'time_stamp'</span>] = pd.to_datetime(df[<span class="string">'time_stamp'</span>], unit=<span class="string">'s'</span>)</span><br><span class="line"><span class="comment"># 此时，time_stamp列的数据类型变为&lt;M8[ns]，即datetime64</span></span><br></pre></td></tr></table></figure><blockquote><p><code>to_datetime</code>函数可用指定格式化日期时间，如:<code>pd.to_datetime('2019/8/3 10:24:48', format='%Y/%m/%d %H:%M:%S')</code></p></blockquote><blockquote><p>其中参数<code>unit</code>是输入数据的单位，其为字符串类型：<code>string[D,s,ms,us,ns]</code>,默认是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup><mi>n</mi><msup><mi>s</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">&#x27;ns&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>.</p></blockquote><hr><h2 id="保存文件"><a class="markdownIt-Anchor" href="#保存文件"></a> 保存文件</h2><p>将数据直接保存到本地的csv文件，方便以后读取：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.to_csv(<span class="string">'../xx/data.csv'</span>) <span class="comment"># 存储目录</span></span><br></pre></td></tr></table></figure><hr><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference🔗</h2><ol><li><a href="https://github.com/jvns/pandas-cookbook" target="_blank" rel="noopener">Github: pandas-cookbook</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas-cookbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《算法图解》学习笔记：上部</title>
      <link href="/2019/08/02/Algorithm-1/"/>
      <url>/2019/08/02/Algorithm-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本系列文章是对《算法图解》该书的一个学习性笔记。文章中有大量图片，初次加载可能会比较慢<sub>(￣▽￣)</sub>*</p></blockquote><a id="more"></a><h2 id="chapter-i-算法简介"><a class="markdownIt-Anchor" href="#chapter-i-算法简介"></a> Chapter Ⅰ 算法简介</h2><h3 id="二分查找"><a class="markdownIt-Anchor" href="#二分查找"></a> 二分查找</h3><h4 id="easy-learning"><a class="markdownIt-Anchor" href="#easy-learning"></a> Easy-Learning</h4><p><strong>简单查找</strong>：想象我们现在正在玩猜数字的游戏。我们在0-100中猜数字，每次猜测只能排除一个数字，假设设定的猜测数为99，如果我们按照1，2，3,…顺序猜测，那么将要猜测99次才能猜中。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564490148254.png" alt></p><p><strong>二分查找</strong>：当我们希望在一个很大的数据集中查找某一个数据，例如在网站数据库中寻找某一个用户名信息。如果我们从第一个用户名字母&quot;A&quot;开始查对，如果该用户名排名很后，将会非常耗时。然而，我们可以选择从中间字母，例如&quot;L&quot;字母开始查找。这种从中间开始查找的思想就是二分查找算法的核心。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564490173328.png" alt></p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564490271061.png" alt></p><hr><p>二分查找算法的输入是一个<strong>有序</strong>的元素列表。如果要查找的元素包含在列表中，二分查找返回其索引位置；否则返回null。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564489847814.png" alt></p><p>由猜数字的例子，我们可以推导出二分查找与简单查找的步数对比：<strong>一般而言，对于包含<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个元素的列表，用二分查找最多需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>步，而简单查找最多需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>步</strong>。</p><hr><h4 id="python实现"><a class="markdownIt-Anchor" href="#python实现"></a> python实现</h4><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564492069757.png" alt></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list, item)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    参数说明：</span></span><br><span class="line"><span class="string">        list: 需要查找的值所在的列表</span></span><br><span class="line"><span class="string">        item: 需要查找的值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 获取列表的初始两端的索引，即为查找的索引范围</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(list) - <span class="number">1</span> <span class="comment"># 列表长度减1即为最后一个元素的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high: <span class="comment"># 设置终止条件，当low=high时，说明整个list都被遍历了</span></span><br><span class="line">        <span class="comment"># 获取中间位置元素的索引</span></span><br><span class="line">        mid = int((low + high) / <span class="number">2</span>) <span class="comment"># 在python2中会自动将mid向下取整，而pyhton3会得到浮点型，则需将其转为整数类型，也可以使用math模块的floor方法</span></span><br><span class="line">        guess = list[mid] <span class="comment"># 选取list列表的中间值为猜测值</span></span><br><span class="line">        <span class="comment"># 当找到匹配值时，将其索引返回</span></span><br><span class="line">        <span class="keyword">if</span> guess == item:   </span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="comment"># 条件判断：若猜测值比真实值小，则修改low,反之则修改high</span></span><br><span class="line">        <span class="keyword">if</span> guess &lt; item:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h4 id="算法运行时间"><a class="markdownIt-Anchor" href="#算法运行时间"></a> 算法运行时间</h4><p>一般而言，我们应选择效率最高的算法，以最大限度地减少运行时间或占用空间。</p><p>假设列表包含40亿个数字，则简单查找逐个地检查数字，最多需要猜40亿次，即最多需要猜测的次数与列表长度相同，这被称为<strong>线性时间</strong>（linear time）；而二分查找最多只需猜测32次，其运行时间为<strong>对数时间</strong>（或log时间）</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564492317190.png" alt></p><hr><h3 id="大o表示法"><a class="markdownIt-Anchor" href="#大o表示法"></a> 大O表示法</h3><p>大O表示法是一种特殊的表示法，可以衡量算法的运行速度的快慢。</p><h4 id="算法运行时间以不同速度增加"><a class="markdownIt-Anchor" href="#算法运行时间以不同速度增加"></a> 算法运行时间以不同速度增加</h4><p>假设现在Bob要为NASA(美国国家航空航天局，梦想之地ヾ(≧▽≦*)o)编写一个查找算法，帮助计算着陆地点。</p><p>Bob需要做出决定，是使用简单查找还是二分查找。使用的算法必须快速而准确。 一方面，二分查找的速度更快。Bob必须在10秒钟内找出着陆地点，否 则火箭将偏离方向。另一方面，简单查找算法编写起来更容易，因此出现bug的可能性更小。Bob可不希望引导火箭着陆的代码中有bug！为确保万无一失，Bob决定计算两种算法在列表包含100个元素的情况下需要的时间。</p><p>假设检查一个元素需要1毫秒。使用简单查找时，Bob必须检查100个元素，因此需要100毫秒才能查找完毕。而使用二分查找时，只需检查7个元素（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mn>100</mn></mrow><annotation encoding="application/x-tex">\log_2100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>大约为7），因此需要7毫秒就能查找完毕。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564492877918.png" alt></p><p>当列表包含100个元素时，简单查找需要100毫秒，而二分查找需要7毫秒，经计算，二分查找的速度大约为简单查找的15倍。而当列表元素为1000，10000，…时，这个倍数关系还是否成立？</p><p>答案是不成立。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><mrow><mi mathvariant="normal">因</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">二</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">查</mi><mi mathvariant="normal">找</mi><mi mathvariant="normal">和</mi><mi mathvariant="normal">简</mi><mi mathvariant="normal">单</mi><mi mathvariant="normal">查</mi><mi mathvariant="normal">找</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">运</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">增</mi><mi mathvariant="normal">速</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">同</mi><mi mathvariant="normal">。</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\color{red}{因为二分查找和简单查找的运行时间的增速不同。}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord" style="color:red;"><span class="mord cjk_fallback" style="color:red;">因</span><span class="mord cjk_fallback" style="color:red;">为</span><span class="mord cjk_fallback" style="color:red;">二</span><span class="mord cjk_fallback" style="color:red;">分</span><span class="mord cjk_fallback" style="color:red;">查</span><span class="mord cjk_fallback" style="color:red;">找</span><span class="mord cjk_fallback" style="color:red;">和</span><span class="mord cjk_fallback" style="color:red;">简</span><span class="mord cjk_fallback" style="color:red;">单</span><span class="mord cjk_fallback" style="color:red;">查</span><span class="mord cjk_fallback" style="color:red;">找</span><span class="mord cjk_fallback" style="color:red;">的</span><span class="mord cjk_fallback" style="color:red;">运</span><span class="mord cjk_fallback" style="color:red;">行</span><span class="mord cjk_fallback" style="color:red;">时</span><span class="mord cjk_fallback" style="color:red;">间</span><span class="mord cjk_fallback" style="color:red;">的</span><span class="mord cjk_fallback" style="color:red;">增</span><span class="mord cjk_fallback" style="color:red;">速</span><span class="mord cjk_fallback" style="color:red;">不</span><span class="mord cjk_fallback" style="color:red;">同</span><span class="mord cjk_fallback" style="color:red;">。</span></span></span></span></span></p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564493011456.png" alt></p><p>也就是说，随着元素数量的增加，二分查找需要的额外时间并不多，<br>而简单查找需要的额外时间却很多。当列表包含10亿个元素时，为==<strong>3300万倍</strong>==。</p><p>有鉴于此，仅知道算法需要多长时间才能运行完毕还不够，更有意义的是知道运行时间随列表增长而增加的速度。这正是大O表示法的用武之地。</p><p>大O表示法指出了算法运行时间的增速。例如，假设列表包含n个元素。简单查找需要检查每个元素，因此需要执行n次操作。使用大O表示法，这个运行时间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p><p>而对于二分查找，为检查长度为n的列表，其需要执行<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>次操作。使用大O表示法，为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>.</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\log</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span></span></span></span>在这里默认以2为底数。</p></blockquote><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564493434859.png" alt></p><hr><h4 id="理解不同的大o运行时间"><a class="markdownIt-Anchor" href="#理解不同的大o运行时间"></a> 理解不同的大O运行时间</h4><p>以在白纸上画网格为例：</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564493584187.png" alt></p><p><strong>算法1</strong>：简单查找算法实现，则是以每次画一个格式的方式，重复16次：</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564493626897.png" alt></p><p><strong>算法2</strong>：二分查找方式，则是每次将纸对折，然后沿着虚线画条线，则第一次对称相当于画了两个格子，重复操作。最终我们只需折4次后再打开，就得到16个格子。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564493757482.png" alt></p><p>可知算法1的运行时间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，算法2的运行时间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p><hr><h4 id="大o表示法指出最糟情况下的运行时间"><a class="markdownIt-Anchor" href="#大o表示法指出最糟情况下的运行时间"></a> 大O表示法指出最糟情况下的运行时间</h4><p>例如使用简单查找方式在电话簿中查找人。如果电话簿中一共有n个电话号码，则算法最多查找n次，那么其运行时间是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p><p>如果查找一次就找到了，这当然是最佳情形，但大O表示法说的是最糟的情形。在最糟情况下，必须查看电话簿中的每个条目，对应的运行时间为O(n)。这是一个保证——你知道简单查找的运行时间不可能超过O(n)。</p><hr><h4 id="常见的大o运行时间"><a class="markdownIt-Anchor" href="#常见的大o运行时间"></a> 常见的大O运行时间</h4><ul><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，也叫对数时间，这样的算法包括二分查找。</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，也叫线性时间，这样的算法包括简单查找。</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n * \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，这样的算法包括第4章将介绍的<strong>快速排序</strong>——一种速度较快的排序算法。</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，这样的算法包括第2章将介绍的<strong>选择排序</strong>——一种速度较慢的排序算法。</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mclose">)</span></span></span></span>，这样的算法包括接下来将介绍的<strong>旅行商问题</strong>的解决方案——一种非常慢的算法。</p></li></ul><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564494632322.png" alt></p><p>对于大O表示法，我们可以得到如下启示：</p><ul><li><p>算法的速度指的并非时间，而是操作数的<strong>增速</strong>。</p></li><li><p>谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加。</p></li><li><p>算法的运行时间用大O表示法表示。</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>比<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>快，当需要搜索的元素越多时，前者比后者快得越多。</p></li></ul><p>大O表示法的一条简单规则是，大O表示法不考虑乘以、除以、加上或减去的数字。下面这些都不是正确的大O运行时间：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>26</mn><mo stretchy="false">)</mo><mi mathvariant="normal">、</mi><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>26</mn><mo stretchy="false">)</mo><mi mathvariant="normal">、</mi><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mn>26</mn><mo stretchy="false">)</mo><mi mathvariant="normal">、</mi><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>26</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + 26)、O(n - 26)、O(n * 26)、O(n / 26)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span></span></span></span>，它们都应表示为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>！</p><hr><h3 id="旅行商问题"><a class="markdownIt-Anchor" href="#旅行商问题"></a> 旅行商问题</h3><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564543047841.png" alt></p><p>对于每种顺序，他都需要计算总旅程，再挑选出旅程最短的路线。5个城市有120种不同的排列方式。因此，在涉及5个城市时，解决这个问题需要执行120次操作。涉及6个城市时，需要执行720 次操作（有720种不同的排列方式）。涉及7个城市时，需要执行5040次操作！</p><p>推而广之，涉及n个城市时，需要执行n!（n的阶乘）次操作才能计算出结果。因此运行时间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mclose">)</span></span></span></span>，即阶乘时间。除非涉及的城市数很少，否则需要执行非常多的操作.</p><p>这就是计算机科学领域非常著名的旅行商问题，其计算时间增加得非常快。对于这个问题，目前还没有找到更快的算法，有些很聪明的人认为这个问题根本就没有更巧妙的算法。</p><hr><h2 id="chapter-ii-选择排序"><a class="markdownIt-Anchor" href="#chapter-ii-选择排序"></a> Chapter Ⅱ 选择排序</h2><h3 id="内存的工作原理"><a class="markdownIt-Anchor" href="#内存的工作原理"></a> 内存的工作原理</h3><p>把内存想象成很多的抽屉的集合，每个抽屉都有其对应的位置，即地址。在抽屉里可以存放物体，即存储值。</p><p>当需要将数据存储到内存时，我们向计算机请求提供存储空间，计算机给你一个存储地址。需要存储多项数据时，有两种基本方式——<strong>数组和链表</strong>。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564544074403.png" alt></p><hr><h3 id="数组和链表"><a class="markdownIt-Anchor" href="#数组和链表"></a> 数组和链表</h3><p>假设我们需要编写一个管理代办事项的应用程序，需要在内存中存储一系列代办事项。</p><p>鉴于数组更容易掌握，我们先将待办事项存储在数组中。使用数组意味着所有待办事项在内存中都是<strong>相连</strong>的（紧靠在一起的）。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564544328110.png" alt></p><p>现在假设你要添加第四个待办事项，但后面的那个抽屉放着别人的东西！在这种情况下，我们只能请求计算机重新分配一块可容纳4个待办事项的内存，再将所有待办事项都移到那里。</p><p>如果我们又想添加新的代办事项，而又一次不幸运的，后面的位置又有其他人占用了。于是我们又要再次转移，这样非常麻烦。</p><p>同样，在数组中添加新元素也可能很麻烦。如果没有了空间，就得移到内存的其他地方，因此添加新元素的速度会很慢。一种解决之道是“预留座位”：即便当前只有3个待办事项，也请计算机提供10个位置，以防需要添加待办事项。这样，只要待办事项不超过10个，就无需转移。</p><p>然而，这样做可以看出有2个缺点：</p><ul><li>我们额外请求的位置可能根本用上不，这样造成内存浪费。自己用不上，又不让别人用(* ￣︿￣)</li><li>如果添加的代办事项超过10个，我们还是需要转移。</li></ul><p>为了完美解决这个问题，我们可以使用<strong>链表</strong>来解决。</p><hr><h4 id="链表"><a class="markdownIt-Anchor" href="#链表"></a> 链表</h4><p>链表中的元素可存储在内存的任何地方。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="orange"><mrow><mi mathvariant="normal">链</mi><mi mathvariant="normal">表</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">每</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">都</mi><mi mathvariant="normal">存</mi><mi mathvariant="normal">储</mi><mi mathvariant="normal">了</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">地</mi><mi mathvariant="normal">址</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\color{orange}{链表的每个元素都存储了下一个元素的地址}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord" style="color:orange;"><span class="mord cjk_fallback" style="color:orange;">链</span><span class="mord cjk_fallback" style="color:orange;">表</span><span class="mord cjk_fallback" style="color:orange;">的</span><span class="mord cjk_fallback" style="color:orange;">每</span><span class="mord cjk_fallback" style="color:orange;">个</span><span class="mord cjk_fallback" style="color:orange;">元</span><span class="mord cjk_fallback" style="color:orange;">素</span><span class="mord cjk_fallback" style="color:orange;">都</span><span class="mord cjk_fallback" style="color:orange;">存</span><span class="mord cjk_fallback" style="color:orange;">储</span><span class="mord cjk_fallback" style="color:orange;">了</span><span class="mord cjk_fallback" style="color:orange;">下</span><span class="mord cjk_fallback" style="color:orange;">一</span><span class="mord cjk_fallback" style="color:orange;">个</span><span class="mord cjk_fallback" style="color:orange;">元</span><span class="mord cjk_fallback" style="color:orange;">素</span><span class="mord cjk_fallback" style="color:orange;">的</span><span class="mord cjk_fallback" style="color:orange;">地</span><span class="mord cjk_fallback" style="color:orange;">址</span></span></span></span></span>，从而使<strong>一系列随机的内存地址</strong>串在一起。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564546025934.png" alt></p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564546124422.png" alt></p><p>这犹如寻宝游戏。你前往第一个地址，那里有一张纸条写着“下一个元素的地址为123”。因此，你前往地址123，那里又有一张纸条，写着“下一个元素的地址为847”，以此类推。在链表中添加元素很容易：只需将其放入内存，并<strong>将其地址存储到前一个元素中</strong>。只要有足够的内存空间，就能为链表分配内存。</p><p>链表当然也有自己的缺点。在需要读取链表的<strong>最后一个元素</strong>时，你不能直接读取，因为你不知道它所处的地址，必须先访问元素#1，从中获取元素#2的地址，再访问元素#2并从中获取元素#3的地址，以此类推，直到访问最后一个元素。</p><p>需要<strong>同时读取所有元素</strong>时，链表的效率很高：你读取第一个元素，根据其中的地址再读取第二个元素，以此类推。但如果你需要<mark>跳跃</mark>，链表的效率真的很低。</p><hr><h4 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h4><p>排行榜网站使用卑鄙的手段来增加页面浏览量。它们不在一个页面中显示整个排行榜，而将排行榜的每项内容都放在一个页面中，并让你单击 Next来查看下一项内容。例如，显示十大电视反派时，不在一个页面中显 示整个排行榜，而是先显示第十大反派（Newman）。你必须在每个页面中单击Next，才能看到第一大反派（Gustavo Fring）。这让网站能够在10个页面中显示广告，但用户需要单击Next九次才能看到第一个，真的是很烦。 如果整个排行榜都显示在一个页面中，将方便得多。这样，用户可单击排行榜中的人名来获得更详细的信息。</p><p>由上节中链表介绍可知，若想同时读取所有元素或者跳跃读取元素时，链表不是一个好的选择。</p><p>数组与此不同：你知道其中<strong>每个元素的地址</strong>。例如，假设有一个数组，它包含五个元素，起始地址为00，那么元素#5的地址为04.</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564546723265.png" alt></p><p>需要随机地读取元素时，数组的效率很高，因为可迅速找到数组的任何元素。在链表中，元素并非靠在一起的，你无法迅速计算出第五个元素的内存地址，而必须先访问第一个元素以获取第二个元素的地址，再访问第二个元素以获取第三个元素的地址，以此类推，直到访问第五个元素。</p><hr><h4 id="术语"><a class="markdownIt-Anchor" href="#术语"></a> 术语</h4><p>数组的元素带编号，编号从0而不是1开始。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564546836788.png" alt></p><p>几乎所有的编程语言都从0开始对数组元素进行编号。元素的位置称为索引。因此，不说“元素20的位置为1”，而说“元素20位于索引1处”。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564547386674.png" alt></p><hr><h4 id="在中间插入"><a class="markdownIt-Anchor" href="#在中间插入"></a> 在中间插入</h4><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564572944803.png" alt></p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564572992015.png" alt></p><hr><h4 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h4><p>当我们需要删除元素时，使用链表也是一个很好的选择，只需要改变前一个元素指向的地址即可。而对于数组，删除一个元素后，需要将后面的元素都向前移。</p><p>不同于插入，删除元素总能成功。如果内存中没有足够的空间，插入操作可能失败，但在任何情况下都能够将元素删除。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564573436800.png" alt></p><p>需要注意的是，当能够立即访问到删除的元素时，删除操作的运行时间才为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。通常我们都记录了链表的第一个元素和最后一个元素，因此删除这些元素时运行时间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><p>数组和链表哪个用得更多呢？显然要看情况。但数组用得很多，因为它支持<mark>随机访问</mark>。有两种访问方式：<strong>随机访问</strong>和<strong>顺序访问</strong>。顺序访问意味着从第一个元素开始逐个地读取元素。链表只能顺序访问：要读取链表的第十个元素，得先读取前九个元素，并沿链接找到第十个元素。随机访问意味着可直接跳到第十个元素。本书经常说数组的读取速度更快，这是因为它们支持随机访问。很多情况都要求能够随机访问，因此数组用得很多。</p><hr><h3 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h3><h4 id="理解"><a class="markdownIt-Anchor" href="#理解"></a> 理解</h4><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564636586034.png" alt></p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564636614906.png" alt></p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564636639847.png" alt></p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564636670269.png" alt></p><hr><h4 id="python代码"><a class="markdownIt-Anchor" href="#python代码"></a> python代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSmallest</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""用于寻找列表中的最小值"""</span></span><br><span class="line">    smallest = arr[<span class="number">0</span>]  <span class="comment"># 用于存储最小值</span></span><br><span class="line">    smallest_index = <span class="number">0</span>  <span class="comment"># 存储最小值元素的索引</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">        <span class="keyword">if</span> arr[i] &lt; smallest:  <span class="comment"># 进行大小判断，更新最小值及其索引</span></span><br><span class="line">            smallest = arr[i]</span><br><span class="line">            smallest_index = i</span><br><span class="line">    <span class="keyword">return</span> smallest_index</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""list:需要进行排序操作的列表"""</span></span><br><span class="line">    newArr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):   </span><br><span class="line">        samllest = findSmallest(arr)    <span class="comment"># 获取最小值索引</span></span><br><span class="line">        newArr.append(arr.pop(samllest))  <span class="comment"># 将最小值索引对应元素从原列表中剔除，并添加到新的排序列表中</span></span><br><span class="line">    <span class="keyword">return</span> newArr  <span class="comment"># 返回新的排序列表</span></span><br></pre></td></tr></table></figure><p>这里有几点需要注意的地方：</p><ul><li><code>pop()</code>方法默认会剔除列表中最后一项元素，并且原列表会改变<ul><li><code>arr.pop()</code>会返回被剔除的那个元素值</li><li>也可以向其传入需要剔除元素的索引</li></ul></li></ul><hr><h2 id="chapter-iii-递归"><a class="markdownIt-Anchor" href="#chapter-iii-递归"></a> Chapter Ⅲ 递归</h2><h3 id="quicklearning-递归"><a class="markdownIt-Anchor" href="#quicklearning-递归"></a> Quicklearning-递归</h3><p>递归与循环的差别：想象现在有一个大盒子，大盒子内有若干小盒子，我们现在要在这些小盒子中寻找钥匙。</p><p>循环的做法是：我们每次取出一个盒子，如果盒子里是钥匙，则任务完成；如果盒子里还是盒子，我们就把里面的盒子取出，放到大盒子中，再从大盒子中取出一个盒子，重复上述操作。</p><p>递归的做法是：我们从大盒子中取出一个小盒子，将小盒子进行详细检查，如果打开发现有钥匙，则任务完成；如果打开还是盒子，我们继续将这个里面的小盒子打开，进行详细检查，重复上述检查操作。</p><p>递归其实是方便了程序员难为了机器。它只要得到数学公式就能很方便的写出程序。优点就是易理解，容易编程。但递归是用<strong>栈机制</strong>实现的（<em>c++</em>），每深入一层，都要占去一块栈数据区域，对嵌套层数深的一些算法，递归会力不从心，空间上会以内存崩溃而告终，而且递归也带来了大量的函数调用，这也有许多额外的时间开销。所以在深度大时，它的时空性就不好了。循环其缺点就是不容易理解，编写复杂问题时困难。优点是效率高。运行时间只因循环次数增加而增加，没什么额外开销。空间上没有什么增加<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p><blockquote></blockquote><hr><p>递归只是让解决方案更清晰，并没有性能上的优势。实际上，在有些情况下，使用循环的性能更好。</p><blockquote><p>作者在书中引用Leigh Caldwell在Stack Overflow上的一句话：“如果使用循环，程序的性能可能更高；如果使用递归，程序可能容易理解。如何选择要看什么对你来说更重要。”</p></blockquote><hr><h3 id="基线条件和递归条件"><a class="markdownIt-Anchor" href="#基线条件和递归条件"></a> 基线条件和递归条件</h3><p>编写递归函数时，必须告诉它何时停止递归，否则函数会不断调用自身而进行无限循环。</p><p>正因为如此，每个递归函数都有两部分：<strong>基线条件</strong>（base case）和<strong>递归条件</strong>（recursive case）。递归条件指的是函数调用自己，而基线条件则指的是函数不再调用自己，从而避免形成无限循环。</p><p>基线条件和递归条件形式如下：</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564705418049.png" alt></p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564705447674.png" alt></p><hr><h3 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h3><h4 id="quicklearning-栈"><a class="markdownIt-Anchor" href="#quicklearning-栈"></a> QuickLearning-栈</h4><p>调用栈（call stack）是一个非常重要的编程概念。调用栈不仅对编程来说很重要，使用递归时也必须理解这个概念。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564706295027.png" alt="栈"></p><blockquote><p>栈的调用原则：LIFO ( Last In First Out)</p></blockquote><hr><h4 id="调用栈"><a class="markdownIt-Anchor" href="#调用栈"></a> 调用栈</h4><p>计算机在内部使用被称为调用栈的栈。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/20190802085317.png" alt></p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564707540822.png" alt></p><p>当最终主调函数没有调用其他函数，并且本身任务完成的情况下，主调函数完成自己的返回值，最终主调函数也被弹开。</p><p>由上图可知，这个栈存储了多个函数的变量，被称为调用栈。</p><hr><h4 id="递归调用栈"><a class="markdownIt-Anchor" href="#递归调用栈"></a> 递归调用栈</h4><p>递归函数也使用调用栈！</p><p>以递归中常见的阶乘函数为例，<code>factorial(n)</code>定义为:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>=</mo><mi>n</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∗</mo><mn>2</mn><mo>∗</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n! = n * (n-1) * ... * 2 * 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>其python代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x * factorial(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">≠</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">n\ne 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>时，递归会一直进行下去，<code>factorial</code>函数也会被一直调用下去。每调用一次，在调用栈中就会被叠上一层：</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/1564708397105.png" alt></p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/20190802091509.png" alt></p><p>注意，每个<code>factorial</code>函数调用都有自己的n变量。在一个函数调用中不能访问另一个的n变量。</p><p>理解了调用栈的原理，我们就在调用栈的角度上来看递归问题：</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/20190802092050.png" alt></p><p>在使用循环时，我们定义了一个用来查找的盒子堆，我们每次从盒子堆中取出一个，如果里面有盒子，我们就把里面盒子放入盒子堆中，而取出的盒子就抛掉。在这个过程中，我们始终可以观察到盒子堆还有多少盒子待查找。</p><p><img src="https://raw.githubusercontent.com/BingoBounce/Personal_Img_Bed/master/img/20190802092619.png" alt></p><p>而使用递归，我们没有盒子堆，不过递归中会使用栈，就我们待查找的盒子放入栈中，这样我们就无需自己追踪盒子堆了。</p><p>使用栈虽然很方便，但是也要付出代价：存储详尽的信息可能占用大量的内存。每个函数调用都要占用一定的内存，如果栈很高，就意味着计算机存储了大量函数调用的信息。在这种情况下，你有两种选择：</p><ul><li>重新编写代码，转而使用循环。</li><li>使用尾递归。</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="http://blog.sina.com.cn/s/blog_62b1508e0100hcyx.html" target="_blank" rel="noopener">Helloword: 循环与递归的区别</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm: 算法图解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Figure out How &quot;spines&quot; in matplotlib works</title>
      <link href="/2019/07/26/matplotlib/"/>
      <url>/2019/07/26/matplotlib/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这里我们默认导入了需要的模块。</p><blockquote><p>⚠️ 为节省篇幅，本文章假设了我们已经导入所需库。另外spines在字典里的意思为脊椎，个人觉得翻译为坐标轴比较贴切。</p></blockquote><h2 id="设计图像的坐标轴spines"><a class="markdownIt-Anchor" href="#设计图像的坐标轴spines"></a> 设计图像的坐标轴(spines)</h2><h3 id="隐藏指定的spines"><a class="markdownIt-Anchor" href="#隐藏指定的spines"></a> 隐藏指定的spines</h3><p>在matplotlib的图中，默认有四个轴，两个横轴和两个竖轴，即top、bottom、left和right.</p><p><img src="https://github.com/BingoBounce/Personal_Img_Bed/blob/master/1564115742812.png?raw=true" alt="1564115742812"></p><p>如果需要隐藏某方向的轴，只需要使用如下命令：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先我们需要获得图中的四个轴axes</span></span><br><span class="line">ax = plt.gca() <span class="comment"># gca是"get current axes"的缩写</span></span><br><span class="line"><span class="comment"># 这里指定隐藏top轴</span></span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/BingoBounce/Personal_Img_Bed/blob/master/1564116232546.png?raw=true" alt="1564116232546"></p><p>上述隐藏spines的代码原理是将spines的颜色设置为<code>none</code>，相当&quot;隐形&quot;了。</p><p>⚙️  另外还有一种更加直观的方法，直接将spines设置为不可见：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.spines[<span class="string">'top'</span>].set_visible(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="设置spines位置"><a class="markdownIt-Anchor" href="#设置spines位置"></a> 设置spines位置</h3><p>除了可以隐藏spines,也可以设计spines所处的位置。其代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置left轴向外偏离图像30点</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'outward'</span>, <span class="number">30</span>))</span><br></pre></td></tr></table></figure><p><img src="https://github.com/BingoBounce/Personal_Img_Bed/blob/master/1564116726141.png?raw=true" alt="1564116726141"></p><p>为了指定所需x,y轴所对应的spines,我们可以进行如下设定：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置x轴对应bottom轴，y轴对应left轴</span></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br></pre></td></tr></table></figure><hr><p>如果我们现在想显示x,y轴是十字交叉的坐标轴，而不是像上图一样只是两个不相交的线段，那我们可以设置移动轴的位置到交叉轴指定坐标，例如这里我们指定在0处交叉：</p><blockquote><p>为使得一会儿更方便看出不同，我们先把x轴和其刻度的颜色改为黄色:</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.tick_params(axis=<span class="string">'x'</span>, colors=<span class="string">'yellow'</span>) <span class="comment"># tick_params用来设置轴的参数</span></span><br></pre></td></tr></table></figure><p>接下来，我们需要使用上述的<code>set_position()</code>方法来移动交叉轴位置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们先把right轴给隐藏</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>效果如图：</p><p><img src="https://github.com/BingoBounce/Personal_Img_Bed/blob/master/1564119418042.png?raw=true" alt="1564119418042"></p><hr><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2><ol><li><p><a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">看文档不会错系列-matplotlib</a></p></li><li><p><a href="http://scipy-lectures.org/intro/matplotlib/index.html" target="_blank" rel="noopener">良心教程👍scipy-lecture</a></p></li></ol><hr><h2 id="easter-egg"><a class="markdownIt-Anchor" href="#easter-egg"></a> Easter Egg</h2><blockquote><p>读不在三更五鼓，功只怕一曝十寒。——郭沫若</p></blockquote><p>我们可能在画图时会遇到坐标轴的刻度被线条遮挡，导致图的效果不是很好的情形。对于这个问题，我们可以通过改变字体大小和背景透明度的方式，使得线条和刻度同时可见。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> ax.get_xticklabels() + ax.get_yticklabels():</span><br><span class="line">    label.set_fontsize(<span class="number">14</span>)</span><br><span class="line">    label.set_bbox(dict(facecolor=<span class="string">'white'</span>, edgecolor=<span class="string">'None'</span>, alpha=<span class="number">0.75</span>))</span><br></pre></td></tr></table></figure><p>方法说明：</p><ul><li><code>set_fontsize()</code>:重新设置字体的大小</li><li><code>set_bbox()</code>:设置透明度相关的参数：<ul><li><code>facecolor</code>：调节 <code>bbox</code>的前景色</li><li><code>edgecolor</code>:设置边框的颜色，当为<code>None</code>时，表示无边框</li><li><code>alpha</code>设置透明度，范围<code>[0,1]</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Star import is a bad idea!</title>
      <link href="/2019/07/25/import/"/>
      <url>/2019/07/25/import/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="star-import-is-a-bad-idea"><a class="markdownIt-Anchor" href="#star-import-is-a-bad-idea"></a> Star import is a bad idea!</h2><p>Star import即<code>from &lt;module&gt; import *</code>,意味着我们可以访问<module>中所有我们想要访问的命名。</module></p><p>我们先定义如下脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># something.py</span></span><br><span class="line"></span><br><span class="line">public_variable = <span class="number">42</span></span><br><span class="line">_private_variable = <span class="number">141</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">public_function</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I'm a public function! yay!"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_function</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Ain't nobody accessing me from another module...usually"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublicClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_WeirdClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>然后我们在python解释器中执行<code>from something import *</code>，得到如下结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> something <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>public_variable</span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_private_variable</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_private_variable'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>public_function()</span><br><span class="line"><span class="string">"I'm a public function! yay!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_private_function()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_private_function'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = PublicClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;something.PublicClass object at ...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = _WeirdClass()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_WeirdClass'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>可以发现调用<code>_private_variable</code>时，发生名称错误。</p><p>这是因为<code>_private_variable</code>是以<code>_</code>开头的私有变量。如果想允许脚本能够访问模块中的私有变量，则需要在模块中使用<code>__all__</code>。</p><blockquote><p><code>_all__</code>是一个字符串列表，它定义了模块(或包)中的哪些名称将在模块上使用<code>from &lt;module&gt; import *</code>时导出。</p></blockquote><p>当模块中没有使用<code>__all__</code>时，则在调用模块的脚本中可以调用除带有<code>_</code>开头的私有变量外的所有名称。</p><p>于是我们再在<code>something.py</code>文件的顶部添加如下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__all__ = [<span class="string">'_private_variable'</span>, <span class="string">'PublicClass'</span>]</span><br></pre></td></tr></table></figure><p>现在，我们只能从<code>from something import *</code>中调用<code>_private_variable</code>和<code>PublicClass</code>两个名称。如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> something <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>public_variable</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'public_variable'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_private_variable</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>public_function()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'public_function'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_private_function()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_private_function'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = PublicClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;something.PublicClass object at ...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = _WeirdClass()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_WeirdClass'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>以上是使用<code>from &lt;module&gt; import *</code>的情形。对于<code>from &lt;package&gt; import *</code>，<code>__all__</code>会处理在包内的模块，而除此之外，两者作用大致一样。因此，在我们使用<code>from &lt;package&gt; import *</code>时，<code>_all__</code>需要指定所有要加载并导入到当前命名空间的模块。</p><blockquote><p>⚠️ 在一个包中的<code>__init__.py</code>文件中我们忽略声明<code>__all__</code>时，则<code>from &lt;package&gt; import *</code>将不会导入任何东西。</p></blockquote><hr><p>python语言的简洁性是其一大特性。而python设计理念之一为：<em>Explicit is better than implicit</em>，即显式比隐式好。</p><p><code>from &lt;module&gt; import *</code>不是显式的。它没有告诉我们要导入什么，或者要将什么名称引入命名空间。而显式地指定我们需要导入的内容会更好。这样，读者(很可能是你未来的自己)就不会混淆变量/函数/类/等等的位置。</p><p>这就引出另一大特性：<em>Readability counts.</em>-代码可读性很重要。</p><p>即使我们需要导入很多名称，只要显式地指定需要导入的内容，代码也会比star import的可读性高很多。例如使用PEP 328:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Tkinter <span class="keyword">import</span> (Tk, Frame, Button, Entry, Canvas, Text, </span><br><span class="line">        LEFT, DISABLED, NORMAL, RIDGE, END)</span><br></pre></td></tr></table></figure><hr><p>此外，start import还有其他风险。</p><p>例如当模块/或包的作者决定更改<code>__all__</code>列表的内容(添加/删除列表中的内容)时:</p><ul><li>作者从<code>__all__</code>中删除了一个字符串。如果我们的代码使用了这个名称，那么代码将会引发一个NameError，并且很难找出原因。(<strong>隐藏bug的具体可能性</strong>)</li><li>作者<code>__all__</code>中添加了许多新名称字符串，然而我们可能不需要使用新名称，相当于<strong>我们在用不关心的东西填充名称空间，造成名称空间的污染</strong>。这些新名称甚至可能在我们没有意识到的情况下与其他函数或类的定义起冲突。</li></ul><p>当然，star import并不总是不好的，有时候也可以偷偷懒(●’◡’●)，这取决于我们是编写脚本还是编写需要重用的代码。</p><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2><ol><li><a href="https://medium.com/@s16h/importing-star-in-python-88fe9e8bd4d2" target="_blank" rel="noopener">Shahriar Tajbakhsh的博客：importing-star-in-python</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Warning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/20/hello-world/"/>
      <url>/2019/07/20/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
