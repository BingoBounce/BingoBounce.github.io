<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Star import is a bad idea!</title>
      <link href="/2019/07/25/import/"/>
      <url>/2019/07/25/import/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="star-import-is-a-bad-idea"><a class="markdownIt-Anchor" href="#star-import-is-a-bad-idea"></a> Star import is a bad idea!</h2><p>Star import即<code>from &lt;module&gt; import *</code>,意味着我们可以访问<module>中所有我们想要访问的命名。</module></p><p>我们先定义如下脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># something.py</span></span><br><span class="line"></span><br><span class="line">public_variable = <span class="number">42</span></span><br><span class="line">_private_variable = <span class="number">141</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">public_function</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I'm a public function! yay!"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_function</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Ain't nobody accessing me from another module...usually"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublicClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_WeirdClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>然后我们在python解释器中执行<code>from something import *</code>，得到如下结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> something <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>public_variable</span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_private_variable</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_private_variable'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>public_function()</span><br><span class="line"><span class="string">"I'm a public function! yay!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_private_function()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_private_function'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = PublicClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;something.PublicClass object at ...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = _WeirdClass()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_WeirdClass'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>可以发现调用<code>_private_variable</code>时，发生名称错误。</p><p>这是因为<code>_private_variable</code>是以<code>_</code>开头的私有变量。如果想允许脚本能够访问模块中的私有变量，则需要在模块中使用<code>__all__</code>。</p><blockquote><p><code>_all__</code>是一个字符串列表，它定义了模块(或包)中的哪些名称将在模块上使用<code>from &lt;module&gt; import *</code>时导出。</p></blockquote><p>当模块中没有使用<code>__all__</code>时，则在调用模块的脚本中可以调用除带有<code>_</code>开头的私有变量外的所有名称。</p><p>于是我们再在<code>something.py</code>文件的顶部添加如下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__all__ = [<span class="string">'_private_variable'</span>, <span class="string">'PublicClass'</span>]</span><br></pre></td></tr></table></figure><p>现在，我们只能从<code>from something import *</code>中调用<code>_private_variable</code>和<code>PublicClass</code>两个名称。如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> something <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>public_variable</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'public_variable'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_private_variable</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>public_function()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'public_function'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_private_function()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_private_function'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = PublicClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;something.PublicClass object at ...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = _WeirdClass()</span><br><span class="line">...</span><br><span class="line">NameError: name <span class="string">'_WeirdClass'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>以上是使用<code>from &lt;module&gt; import *</code>的情形。对于<code>from &lt;package&gt; import *</code>，<code>__all__</code>会处理在包内的模块，而除此之外，两者作用大致一样。因此，在我们使用<code>from &lt;package&gt; import *</code>时，<code>_all__</code>需要指定所有要加载并导入到当前命名空间的模块。</p><blockquote><p>⚠️ 在一个包中的<code>__init__.py</code>文件中我们忽略声明<code>__all__</code>时，则<code>from &lt;package&gt; import *</code>将不会导入任何东西。</p></blockquote><hr><p>python语言的简洁性是其一大特性。而python设计理念之一为：<em>Explicit is better than implicit</em>，即显式比隐式好。</p><p><code>from &lt;module&gt; import *</code>不是显式的。它没有告诉我们要导入什么，或者要将什么名称引入命名空间。而显式地指定我们需要导入的内容会更好。这样，读者(很可能是你未来的自己)就不会混淆变量/函数/类/等等的位置。</p><p>这就引出另一大特性：<em>Readability counts.</em>-代码可读性很重要。</p><p>即使我们需要导入很多名称，只要显式地指定需要导入的内容，代码也会比star import的可读性高很多。例如使用PEP 328:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Tkinter <span class="keyword">import</span> (Tk, Frame, Button, Entry, Canvas, Text, </span><br><span class="line">        LEFT, DISABLED, NORMAL, RIDGE, END)</span><br></pre></td></tr></table></figure><hr><p>此外，start import还有其他风险。</p><p>例如当模块/或包的作者决定更改<code>__all__</code>列表的内容(添加/删除列表中的内容)时:</p><ul><li>作者从<code>__all__</code>中删除了一个字符串。如果我们的代码使用了这个名称，那么代码将会引发一个NameError，并且很难找出原因。(<strong>隐藏bug的具体可能性</strong>)</li><li>作者<code>__all__</code>中添加了许多新名称字符串，然而我们可能不需要使用新名称，相当于<strong>我们在用不关心的东西填充名称空间，造成名称空间的污染</strong>。这些新名称甚至可能在我们没有意识到的情况下与其他函数或类的定义起冲突。</li></ul><p>当然，star import并不总是不好的，有时候也可以偷偷懒(●’◡’●)，这取决于我们是编写脚本还是编写需要重用的代码。</p><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2><ol><li><a href="https://medium.com/@s16h/importing-star-in-python-88fe9e8bd4d2" target="_blank" rel="noopener">Shahriar Tajbakhsh的博客：importing-star-in-python</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> ”python“ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Warning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/20/hello-world/"/>
      <url>/2019/07/20/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
